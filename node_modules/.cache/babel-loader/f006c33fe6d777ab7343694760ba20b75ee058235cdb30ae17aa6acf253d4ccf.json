{"ast":null,"code":"var _jsxFileName = \"/Users/bng-anuphap_c/Projects/Invoice Management/frontend/src/pages/InvoiceFormPopup.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './InvoiceFormPopup.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InvoiceFormPopup = ({\n  invoice,\n  onSave,\n  onClose,\n  receiptTypes\n}) => {\n  _s();\n  const [formInvoice, setFormInvoice] = useState(invoice || {\n    invoiceNumber: '',\n    receiptNumber: '',\n    date: '',\n    time: '',\n    receiptType: '',\n    narrative: '',\n    amount: '',\n    currency: '',\n    images: [],\n    existingImages: [],\n    targetCurrency: '',\n    // Added field for target currency\n    conversionRate: 1,\n    // Added field for conversion rate\n    convertedAmount: '' // Added field for converted amount\n  });\n  const [fullScreenImage, setFullScreenImage] = useState(null);\n  const [imageToDelete, setImageToDelete] = useState(null);\n\n  // List of all available currencies\n  const availableCurrencies = ['USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JPY', 'CHF', 'CNY', 'INR', 'BRL', 'MXN', 'SEK', 'NOK', 'DKK', 'ZAR', 'SGD', 'HKD', 'NZD', 'KRW', 'TRY', 'RUB', 'AED'\n  // Add more currencies if needed\n  ];\n  useEffect(() => {\n    const fetchInvoiceImages = async () => {\n      if (invoice) {\n        try {\n          const response = await axios.get(`http://localhost:5001/api/invoices/${invoice.id}/images`);\n          if (response.data && response.data.images) {\n            setFormInvoice(prev => ({\n              ...prev,\n              existingImages: response.data.images,\n              time: invoice.time ? invoice.time.substring(0, 5) : '' // Set time to `HH:MM` format for editing\n            }));\n          }\n        } catch (error) {\n          console.error(`Failed to fetch images for invoice ${invoice.id}`, error);\n        }\n      }\n    };\n    fetchInvoiceImages();\n  }, [invoice]);\n\n  // Handle input changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Handle time format properly\n    if (name === 'time') {\n      // Convert `HH:MM` from input to `HH:MM:00` format for storage\n      setFormInvoice({\n        ...formInvoice,\n        [name]: `${value}:00`\n      });\n    } else if (name === 'conversionRate' || name === 'amount') {\n      // Handle numeric fields for conversion rate and amount\n      setFormInvoice({\n        ...formInvoice,\n        [name]: value\n      }, updateConvertedAmount);\n    } else {\n      setFormInvoice({\n        ...formInvoice,\n        [name]: value\n      });\n    }\n  };\n\n  // Handle the change in images\n  const handleImageChange = e => {\n    const files = Array.from(e.target.files);\n    setFormInvoice({\n      ...formInvoice,\n      images: files\n    });\n  };\n\n  // Update converted amount whenever amount or conversion rate changes\n  const updateConvertedAmount = () => {\n    const {\n      amount,\n      conversionRate\n    } = formInvoice;\n    const convertedAmount = amount && conversionRate ? (amount * conversionRate).toFixed(2) : '';\n    setFormInvoice(prev => ({\n      ...prev,\n      convertedAmount\n    }));\n  };\n\n  // Handle removing an existing image\n  const handleRemoveExistingImage = imageUrl => {\n    setImageToDelete(imageUrl);\n  };\n\n  // Confirm delete of existing image\n  const handleConfirmDeleteImage = async () => {\n    if (imageToDelete) {\n      try {\n        await axios.delete(`http://localhost:5001/api/invoices/images`, {\n          data: {\n            imageUrl: imageToDelete\n          }\n        });\n        setFormInvoice({\n          ...formInvoice,\n          existingImages: formInvoice.existingImages.filter(img => img.imageUrl !== imageToDelete)\n        });\n        setImageToDelete(null);\n      } catch (error) {\n        console.error('Failed to delete image', error);\n      }\n    }\n  };\n\n  // Cancel delete image\n  const handleCancelDeleteImage = () => {\n    setImageToDelete(null);\n  };\n\n  // Handle displaying an image in fullscreen\n  const handleImageClick = imageUrl => {\n    setFullScreenImage(imageUrl);\n  };\n\n  // Close fullscreen image view\n  const handleCloseFullScreen = e => {\n    e.stopPropagation(); // Prevent any other click events when closing\n    setFullScreenImage(null);\n  };\n\n  // Handle form submission\n  const handleSubmit = () => {\n    onSave(formInvoice);\n    alert(invoice ? 'Invoice updated successfully!' : 'Invoice added successfully!');\n    // Refresh the page after the alert\n    window.location.reload();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup-overlay fancy-popup\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup fancy-popup-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: invoice ? 'Edit Invoice' : 'Add Invoice'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"invoiceNumber\",\n        placeholder: \"Invoice Number\",\n        value: formInvoice.invoiceNumber,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"receiptNumber\",\n        placeholder: \"Receipt Number\",\n        value: formInvoice.receiptNumber,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        name: \"date\",\n        placeholder: \"Date\",\n        value: formInvoice.date,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        name: \"time\",\n        placeholder: \"Time\",\n        value: formInvoice.time.substring(0, 5) // Set time in `HH:MM` format for input\n        ,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"receiptType\",\n        value: formInvoice.receiptType,\n        onChange: handleInputChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Receipt Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), receiptTypes.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option,\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"narrative\",\n        placeholder: \"Narrative\",\n        value: formInvoice.narrative,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"amount\",\n        placeholder: \"Amount\",\n        value: formInvoice.amount,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"currency\",\n        value: formInvoice.currency,\n        onChange: handleInputChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Currency\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), availableCurrencies.map((currency, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: currency,\n          children: currency\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"targetCurrency\",\n        value: formInvoice.targetCurrency,\n        onChange: handleInputChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Target Currency\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), availableCurrencies.map((currency, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: currency,\n          children: currency\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"conversionRate\",\n        placeholder: \"Conversion Rate\",\n        value: formInvoice.conversionRate,\n        onChange: e => {\n          handleInputChange(e);\n          updateConvertedAmount(); // Update converted amount on change\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"convertedAmount\",\n        placeholder: \"Converted Amount\",\n        value: formInvoice.convertedAmount,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), Array.isArray(formInvoice.existingImages) && formInvoice.existingImages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"existing-images\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Existing Images\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"existing-images-list\",\n          children: formInvoice.existingImages.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"existing-image-item\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://localhost:5001/${image.imageUrl}`,\n              alt: `Invoice ${formInvoice.invoiceNumber} Image ${index + 1}`,\n              className: \"invoice-image-thumbnail\",\n              onClick: () => handleImageClick(image.imageUrl)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"images\",\n        multiple: true,\n        onChange: handleImageChange,\n        accept: \"image/*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          className: \"fancy-button\",\n          children: invoice ? 'Update Invoice' : 'Add Invoice'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"fancy-button cancel-button\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), fullScreenImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"full-screen-overlay\",\n      onClick: handleCloseFullScreen,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-screen-image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://localhost:5001/${fullScreenImage}`,\n          alt: \"Full Screen\",\n          className: \"full-screen-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"close-full-screen-button fancy-button\",\n          onClick: handleCloseFullScreen,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(InvoiceFormPopup, \"hXjEa6NJdtvUwX89QCc4BQ7L1aw=\");\n_c = InvoiceFormPopup;\nexport default InvoiceFormPopup;\nvar _c;\n$RefreshReg$(_c, \"InvoiceFormPopup\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","InvoiceFormPopup","invoice","onSave","onClose","receiptTypes","_s","formInvoice","setFormInvoice","invoiceNumber","receiptNumber","date","time","receiptType","narrative","amount","currency","images","existingImages","targetCurrency","conversionRate","convertedAmount","fullScreenImage","setFullScreenImage","imageToDelete","setImageToDelete","availableCurrencies","fetchInvoiceImages","response","get","id","data","prev","substring","error","console","handleInputChange","e","name","value","target","updateConvertedAmount","handleImageChange","files","Array","from","toFixed","handleRemoveExistingImage","imageUrl","handleConfirmDeleteImage","delete","filter","img","handleCancelDeleteImage","handleImageClick","handleCloseFullScreen","stopPropagation","handleSubmit","alert","window","location","reload","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","map","option","index","readOnly","isArray","length","image","src","alt","onClick","multiple","accept","_c","$RefreshReg$"],"sources":["/Users/bng-anuphap_c/Projects/Invoice Management/frontend/src/pages/InvoiceFormPopup.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './InvoiceFormPopup.css';\n\nconst InvoiceFormPopup = ({ invoice, onSave, onClose, receiptTypes }) => {\n  const [formInvoice, setFormInvoice] = useState(\n    invoice || {\n      invoiceNumber: '',\n      receiptNumber: '',\n      date: '',\n      time: '',\n      receiptType: '',\n      narrative: '',\n      amount: '',\n      currency: '',\n      images: [],\n      existingImages: [],\n      targetCurrency: '', // Added field for target currency\n      conversionRate: 1, // Added field for conversion rate\n      convertedAmount: '', // Added field for converted amount\n    }\n  );\n\n  const [fullScreenImage, setFullScreenImage] = useState(null);\n  const [imageToDelete, setImageToDelete] = useState(null);\n\n  // List of all available currencies\n  const availableCurrencies = [\n    'USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JPY', 'CHF', 'CNY', 'INR', 'BRL', 'MXN', 'SEK', \n    'NOK', 'DKK', 'ZAR', 'SGD', 'HKD', 'NZD', 'KRW', 'TRY', 'RUB', 'AED'\n    // Add more currencies if needed\n  ];\n\n  useEffect(() => {\n    const fetchInvoiceImages = async () => {\n      if (invoice) {\n        try {\n          const response = await axios.get(`http://localhost:5001/api/invoices/${invoice.id}/images`);\n          if (response.data && response.data.images) {\n            setFormInvoice((prev) => ({\n              ...prev,\n              existingImages: response.data.images,\n              time: invoice.time ? invoice.time.substring(0, 5) : '', // Set time to `HH:MM` format for editing\n            }));\n          }\n        } catch (error) {\n          console.error(`Failed to fetch images for invoice ${invoice.id}`, error);\n        }\n      }\n    };\n\n    fetchInvoiceImages();\n  }, [invoice]);\n\n  // Handle input changes\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n\n    // Handle time format properly\n    if (name === 'time') {\n      // Convert `HH:MM` from input to `HH:MM:00` format for storage\n      setFormInvoice({ ...formInvoice, [name]: `${value}:00` });\n    } else if (name === 'conversionRate' || name === 'amount') {\n      // Handle numeric fields for conversion rate and amount\n      setFormInvoice({ ...formInvoice, [name]: value }, updateConvertedAmount);\n    } else {\n      setFormInvoice({ ...formInvoice, [name]: value });\n    }\n  };\n\n  // Handle the change in images\n  const handleImageChange = (e) => {\n    const files = Array.from(e.target.files);\n    setFormInvoice({ ...formInvoice, images: files });\n  };\n\n  // Update converted amount whenever amount or conversion rate changes\n  const updateConvertedAmount = () => {\n    const { amount, conversionRate } = formInvoice;\n    const convertedAmount = amount && conversionRate ? (amount * conversionRate).toFixed(2) : '';\n    setFormInvoice((prev) => ({ ...prev, convertedAmount }));\n  };\n\n  // Handle removing an existing image\n  const handleRemoveExistingImage = (imageUrl) => {\n    setImageToDelete(imageUrl);\n  };\n\n  // Confirm delete of existing image\n  const handleConfirmDeleteImage = async () => {\n    if (imageToDelete) {\n      try {\n        await axios.delete(`http://localhost:5001/api/invoices/images`, {\n          data: { imageUrl: imageToDelete },\n        });\n        setFormInvoice({\n          ...formInvoice,\n          existingImages: formInvoice.existingImages.filter((img) => img.imageUrl !== imageToDelete),\n        });\n        setImageToDelete(null);\n      } catch (error) {\n        console.error('Failed to delete image', error);\n      }\n    }\n  };\n\n  // Cancel delete image\n  const handleCancelDeleteImage = () => {\n    setImageToDelete(null);\n  };\n\n  // Handle displaying an image in fullscreen\n  const handleImageClick = (imageUrl) => {\n    setFullScreenImage(imageUrl);\n  };\n\n  // Close fullscreen image view\n  const handleCloseFullScreen = (e) => {\n    e.stopPropagation(); // Prevent any other click events when closing\n    setFullScreenImage(null);\n  };\n\n  // Handle form submission\n  const handleSubmit = () => {\n    onSave(formInvoice);\n    alert(invoice ? 'Invoice updated successfully!' : 'Invoice added successfully!');\n    // Refresh the page after the alert\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"popup-overlay fancy-popup\">\n      <div className=\"popup fancy-popup-window\">\n        <h3>{invoice ? 'Edit Invoice' : 'Add Invoice'}</h3>\n        <input\n          type=\"text\"\n          name=\"invoiceNumber\"\n          placeholder=\"Invoice Number\"\n          value={formInvoice.invoiceNumber}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          name=\"receiptNumber\"\n          placeholder=\"Receipt Number\"\n          value={formInvoice.receiptNumber}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"date\"\n          name=\"date\"\n          placeholder=\"Date\"\n          value={formInvoice.date}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"time\"\n          name=\"time\"\n          placeholder=\"Time\"\n          value={formInvoice.time.substring(0, 5)} // Set time in `HH:MM` format for input\n          onChange={handleInputChange}\n        />\n        <select\n          name=\"receiptType\"\n          value={formInvoice.receiptType}\n          onChange={handleInputChange}\n        >\n          <option value=\"\">Select Receipt Type</option>\n          {receiptTypes.map((option, index) => (\n            <option key={index} value={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n        <textarea\n          name=\"narrative\"\n          placeholder=\"Narrative\"\n          value={formInvoice.narrative}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"number\"\n          name=\"amount\"\n          placeholder=\"Amount\"\n          value={formInvoice.amount}\n          onChange={handleInputChange}\n        />\n\n        {/* Dropdown for selecting currency */}\n        <select\n          name=\"currency\"\n          value={formInvoice.currency}\n          onChange={handleInputChange}\n        >\n          <option value=\"\">Select Currency</option>\n          {availableCurrencies.map((currency, index) => (\n            <option key={index} value={currency}>\n              {currency}\n            </option>\n          ))}\n        </select>\n\n        {/* Converting Currency Section */}\n        <select\n          name=\"targetCurrency\"\n          value={formInvoice.targetCurrency}\n          onChange={handleInputChange}\n        >\n          <option value=\"\">Select Target Currency</option>\n          {availableCurrencies.map((currency, index) => (\n            <option key={index} value={currency}>\n              {currency}\n            </option>\n          ))}\n        </select>\n        <input\n          type=\"number\"\n          name=\"conversionRate\"\n          placeholder=\"Conversion Rate\"\n          value={formInvoice.conversionRate}\n          onChange={(e) => {\n            handleInputChange(e);\n            updateConvertedAmount(); // Update converted amount on change\n          }}\n        />\n        <input\n          type=\"text\"\n          name=\"convertedAmount\"\n          placeholder=\"Converted Amount\"\n          value={formInvoice.convertedAmount}\n          readOnly\n        />\n\n        {/* Show Existing Images */}\n        {Array.isArray(formInvoice.existingImages) && formInvoice.existingImages.length > 0 && (\n          <div className=\"existing-images\">\n            <h4>Existing Images</h4>\n            <div className=\"existing-images-list\">\n              {formInvoice.existingImages.map((image, index) => (\n                <div key={index} className=\"existing-image-item\">\n                  <img\n                    src={`http://localhost:5001/${image.imageUrl}`}\n                    alt={`Invoice ${formInvoice.invoiceNumber} Image ${index + 1}`}\n                    className=\"invoice-image-thumbnail\"\n                    onClick={() => handleImageClick(image.imageUrl)}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Upload New Images */}\n        <input\n          type=\"file\"\n          name=\"images\"\n          multiple\n          onChange={handleImageChange}\n          accept=\"image/*\"\n        />\n\n        <div className=\"popup-buttons\">\n          <button onClick={handleSubmit} className=\"fancy-button\">\n            {invoice ? 'Update Invoice' : 'Add Invoice'}\n          </button>\n          <button onClick={onClose} className=\"fancy-button cancel-button\">\n            Cancel\n          </button>\n        </div>\n      </div>\n\n      {/* Full Screen Image View */}\n      {fullScreenImage && (\n        <div className=\"full-screen-overlay\" onClick={handleCloseFullScreen}>\n          <div className=\"full-screen-image-container\">\n            <img\n              src={`http://localhost:5001/${fullScreenImage}`}\n              alt=\"Full Screen\"\n              className=\"full-screen-image\"\n            />\n            <button\n              type=\"button\"\n              className=\"close-full-screen-button fancy-button\"\n              onClick={handleCloseFullScreen}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InvoiceFormPopup;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}