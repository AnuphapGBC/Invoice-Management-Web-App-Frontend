{"ast":null,"code":"var _jsxFileName = \"/Users/bng-anuphap_c/Projects/Invoice Management/frontend/src/pages/InvoiceFormPopup.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './InvoiceFormPopup.css';\nconst InvoiceFormPopup = ({\n  invoice,\n  onSave,\n  onClose,\n  receiptTypes\n}) => {\n  const [formInvoice, setFormInvoice] = useState(invoice || {\n    invoiceNumber: '',\n    receiptNumber: '',\n    date: '',\n    time: '',\n    receiptType: '',\n    narrative: '',\n    amount: '',\n    currency: '',\n    images: [],\n    existingImages: [],\n    targetCurrency: '',\n    // Added field for target currency\n    conversionRate: 1,\n    // Added field for conversion rate\n    convertedAmount: '' // Added field for converted amount\n  });\n  const [fullScreenImage, setFullScreenImage] = useState(null);\n  const [imageToDelete, setImageToDelete] = useState(null);\n\n  // List of all available currencies\n  const availableCurrencies = ['USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JPY', 'CHF', 'CNY', 'INR', 'BRL', 'MXN', 'SEK', 'NOK', 'DKK', 'ZAR', 'SGD', 'HKD', 'NZD', 'KRW', 'TRY', 'RUB', 'AED'\n  // Add more currencies if needed\n  ];\n  useEffect(() => {\n    const fetchInvoiceImages = async () => {\n      if (invoice) {\n        try {\n          const response = await axios.get(`http://localhost:5001/api/invoices/${invoice.id}/images`);\n          if (response.data && response.data.images) {\n            setFormInvoice(prev => ({\n              ...prev,\n              existingImages: response.data.images,\n              time: invoice.time ? invoice.time.substring(0, 5) : '' // Set time to `HH:MM` format for editing\n            }));\n          }\n        } catch (error) {\n          console.error(`Failed to fetch images for invoice ${invoice.id}`, error);\n        }\n      }\n    };\n    fetchInvoiceImages();\n  }, [invoice]);\n\n  // Handle input changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Handle time format properly\n    if (name === 'time') {\n      // Convert `HH:MM` from input to `HH:MM:00` format for storage\n      setFormInvoice({\n        ...formInvoice,\n        [name]: `${value}:00`\n      });\n    } else {\n      setFormInvoice({\n        ...formInvoice,\n        [name]: value\n      });\n\n      // Update converted amount if relevant fields are changed\n      if (name === 'amount' || name === 'conversionRate' || name === 'targetCurrency') {\n        updateConvertedAmount({\n          ...formInvoice,\n          [name]: value\n        });\n      }\n    }\n  };\n\n  // Update converted amount whenever amount, conversion rate, or target currency changes\n  const updateConvertedAmount = updatedInvoice => {\n    const {\n      amount,\n      conversionRate,\n      targetCurrency\n    } = updatedInvoice;\n    if (amount && conversionRate && targetCurrency) {\n      const convertedAmount = (amount * conversionRate).toFixed(2);\n      setFormInvoice(prev => ({\n        ...prev,\n        convertedAmount\n      }));\n    } else {\n      setFormInvoice(prev => ({\n        ...prev,\n        convertedAmount: ''\n      }));\n    }\n  };\n\n  // Handle the change in images\n  const handleImageChange = e => {\n    const files = Array.from(e.target.files);\n    setFormInvoice({\n      ...formInvoice,\n      images: files\n    });\n  };\n\n  // Handle removing an existing image\n  const handleRemoveExistingImage = imageUrl => {\n    setImageToDelete(imageUrl);\n  };\n\n  // Confirm delete of existing image\n  const handleConfirmDeleteImage = async () => {\n    if (imageToDelete) {\n      try {\n        await axios.delete(`http://localhost:5001/api/invoices/images`, {\n          data: {\n            imageUrl: imageToDelete\n          }\n        });\n        setFormInvoice({\n          ...formInvoice,\n          existingImages: formInvoice.existingImages.filter(img => img.imageUrl !== imageToDelete)\n        });\n        setImageToDelete(null);\n      } catch (error) {\n        console.error('Failed to delete image', error);\n      }\n    }\n  };\n\n  // Cancel delete image\n  const handleCancelDeleteImage = () => {\n    setImageToDelete(null);\n  };\n\n  // Handle displaying an image in fullscreen\n  const handleImageClick = imageUrl => {\n    setFullScreenImage(imageUrl);\n  };\n\n  // Close fullscreen image view\n  const handleCloseFullScreen = e => {\n    e.stopPropagation(); // Prevent any other click events when closing\n    setFullScreenImage(null);\n  };\n\n  // Handle form submission\n  const handleSubmit = () => {\n    onSave(formInvoice);\n    alert(invoice ? 'Invoice updated successfully!' : 'Invoice added successfully!');\n    // Refresh the page after the alert\n    window.location.reload();\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-overlay fancy-popup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup fancy-popup-window\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, invoice ? 'Edit Invoice' : 'Add Invoice'), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"invoiceNumber\",\n    placeholder: \"Invoice Number\",\n    value: formInvoice.invoiceNumber,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"receiptNumber\",\n    placeholder: \"Receipt Number\",\n    value: formInvoice.receiptNumber,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    name: \"date\",\n    placeholder: \"Date\",\n    value: formInvoice.date,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"time\",\n    name: \"time\",\n    placeholder: \"Time\",\n    value: formInvoice.time.substring(0, 5) // Set time in `HH:MM` format for input\n    ,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"receiptType\",\n    value: formInvoice.receiptType,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, \"Select Receipt Type\"), receiptTypes.map((option, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, option))), /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"narrative\",\n    placeholder: \"Narrative\",\n    value: formInvoice.narrative,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    name: \"amount\",\n    placeholder: \"Amount\",\n    value: formInvoice.amount,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"currency\",\n    value: formInvoice.currency,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, \"Select Currency\"), availableCurrencies.map((currency, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: currency,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }, currency))), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"targetCurrency\",\n    value: formInvoice.targetCurrency,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, \"Select Target Currency\"), availableCurrencies.map((currency, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: currency,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }\n  }, currency))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    name: \"conversionRate\",\n    placeholder: \"Conversion Rate\",\n    value: formInvoice.conversionRate,\n    onChange: e => {\n      handleInputChange(e);\n      updateConvertedAmount({\n        ...formInvoice,\n        conversionRate: e.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"convertedAmount\",\n    placeholder: \"Converted Amount\",\n    value: formInvoice.convertedAmount,\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }), Array.isArray(formInvoice.existingImages) && formInvoice.existingImages.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"existing-images\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, \"Existing Images\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"existing-images-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }\n  }, formInvoice.existingImages.map((image, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"existing-image-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://localhost:5001/${image.imageUrl}`,\n    alt: `Invoice ${formInvoice.invoiceNumber} Image ${index + 1}`,\n    className: \"invoice-image-thumbnail\",\n    onClick: () => handleImageClick(image.imageUrl),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 19\n    }\n  }))))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    name: \"images\",\n    multiple: true,\n    onChange: handleImageChange,\n    accept: \"image/*\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    className: \"fancy-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }, invoice ? 'Update Invoice' : 'Add Invoice'), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onClose,\n    className: \"fancy-button cancel-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))), fullScreenImage && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"full-screen-overlay\",\n    onClick: handleCloseFullScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"full-screen-image-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://localhost:5001/${fullScreenImage}`,\n    alt: \"Full Screen\",\n    className: \"full-screen-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"close-full-screen-button fancy-button\",\n    onClick: handleCloseFullScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }\n  }, \"Close\"))));\n};\nexport default InvoiceFormPopup;","map":{"version":3,"names":["React","useState","useEffect","axios","InvoiceFormPopup","invoice","onSave","onClose","receiptTypes","formInvoice","setFormInvoice","invoiceNumber","receiptNumber","date","time","receiptType","narrative","amount","currency","images","existingImages","targetCurrency","conversionRate","convertedAmount","fullScreenImage","setFullScreenImage","imageToDelete","setImageToDelete","availableCurrencies","fetchInvoiceImages","response","get","id","data","prev","substring","error","console","handleInputChange","e","name","value","target","updateConvertedAmount","updatedInvoice","toFixed","handleImageChange","files","Array","from","handleRemoveExistingImage","imageUrl","handleConfirmDeleteImage","delete","filter","img","handleCancelDeleteImage","handleImageClick","handleCloseFullScreen","stopPropagation","handleSubmit","alert","window","location","reload","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","map","option","index","key","readOnly","isArray","length","image","src","alt","onClick","multiple","accept"],"sources":["/Users/bng-anuphap_c/Projects/Invoice Management/frontend/src/pages/InvoiceFormPopup.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './InvoiceFormPopup.css';\n\nconst InvoiceFormPopup = ({ invoice, onSave, onClose, receiptTypes }) => {\n  const [formInvoice, setFormInvoice] = useState(\n    invoice || {\n      invoiceNumber: '',\n      receiptNumber: '',\n      date: '',\n      time: '',\n      receiptType: '',\n      narrative: '',\n      amount: '',\n      currency: '',\n      images: [],\n      existingImages: [],\n      targetCurrency: '', // Added field for target currency\n      conversionRate: 1, // Added field for conversion rate\n      convertedAmount: '', // Added field for converted amount\n    }\n  );\n\n  const [fullScreenImage, setFullScreenImage] = useState(null);\n  const [imageToDelete, setImageToDelete] = useState(null);\n\n  // List of all available currencies\n  const availableCurrencies = [\n    'USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JPY', 'CHF', 'CNY', 'INR', 'BRL', 'MXN', 'SEK', \n    'NOK', 'DKK', 'ZAR', 'SGD', 'HKD', 'NZD', 'KRW', 'TRY', 'RUB', 'AED'\n    // Add more currencies if needed\n  ];\n\n  useEffect(() => {\n    const fetchInvoiceImages = async () => {\n      if (invoice) {\n        try {\n          const response = await axios.get(`http://localhost:5001/api/invoices/${invoice.id}/images`);\n          if (response.data && response.data.images) {\n            setFormInvoice((prev) => ({\n              ...prev,\n              existingImages: response.data.images,\n              time: invoice.time ? invoice.time.substring(0, 5) : '', // Set time to `HH:MM` format for editing\n            }));\n          }\n        } catch (error) {\n          console.error(`Failed to fetch images for invoice ${invoice.id}`, error);\n        }\n      }\n    };\n\n    fetchInvoiceImages();\n  }, [invoice]);\n\n  // Handle input changes\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n\n    // Handle time format properly\n    if (name === 'time') {\n      // Convert `HH:MM` from input to `HH:MM:00` format for storage\n      setFormInvoice({ ...formInvoice, [name]: `${value}:00` });\n    } else {\n      setFormInvoice({ ...formInvoice, [name]: value });\n\n      // Update converted amount if relevant fields are changed\n      if (name === 'amount' || name === 'conversionRate' || name === 'targetCurrency') {\n        updateConvertedAmount({ ...formInvoice, [name]: value });\n      }\n    }\n  };\n\n  // Update converted amount whenever amount, conversion rate, or target currency changes\n  const updateConvertedAmount = (updatedInvoice) => {\n    const { amount, conversionRate, targetCurrency } = updatedInvoice;\n    if (amount && conversionRate && targetCurrency) {\n      const convertedAmount = (amount * conversionRate).toFixed(2);\n      setFormInvoice((prev) => ({ ...prev, convertedAmount }));\n    } else {\n      setFormInvoice((prev) => ({ ...prev, convertedAmount: '' }));\n    }\n  };\n\n  // Handle the change in images\n  const handleImageChange = (e) => {\n    const files = Array.from(e.target.files);\n    setFormInvoice({ ...formInvoice, images: files });\n  };\n\n  // Handle removing an existing image\n  const handleRemoveExistingImage = (imageUrl) => {\n    setImageToDelete(imageUrl);\n  };\n\n  // Confirm delete of existing image\n  const handleConfirmDeleteImage = async () => {\n    if (imageToDelete) {\n      try {\n        await axios.delete(`http://localhost:5001/api/invoices/images`, {\n          data: { imageUrl: imageToDelete },\n        });\n        setFormInvoice({\n          ...formInvoice,\n          existingImages: formInvoice.existingImages.filter((img) => img.imageUrl !== imageToDelete),\n        });\n        setImageToDelete(null);\n      } catch (error) {\n        console.error('Failed to delete image', error);\n      }\n    }\n  };\n\n  // Cancel delete image\n  const handleCancelDeleteImage = () => {\n    setImageToDelete(null);\n  };\n\n  // Handle displaying an image in fullscreen\n  const handleImageClick = (imageUrl) => {\n    setFullScreenImage(imageUrl);\n  };\n\n  // Close fullscreen image view\n  const handleCloseFullScreen = (e) => {\n    e.stopPropagation(); // Prevent any other click events when closing\n    setFullScreenImage(null);\n  };\n\n  // Handle form submission\n  const handleSubmit = () => {\n    onSave(formInvoice);\n    alert(invoice ? 'Invoice updated successfully!' : 'Invoice added successfully!');\n    // Refresh the page after the alert\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"popup-overlay fancy-popup\">\n      <div className=\"popup fancy-popup-window\">\n        <h3>{invoice ? 'Edit Invoice' : 'Add Invoice'}</h3>\n        <input\n          type=\"text\"\n          name=\"invoiceNumber\"\n          placeholder=\"Invoice Number\"\n          value={formInvoice.invoiceNumber}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          name=\"receiptNumber\"\n          placeholder=\"Receipt Number\"\n          value={formInvoice.receiptNumber}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"date\"\n          name=\"date\"\n          placeholder=\"Date\"\n          value={formInvoice.date}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"time\"\n          name=\"time\"\n          placeholder=\"Time\"\n          value={formInvoice.time.substring(0, 5)} // Set time in `HH:MM` format for input\n          onChange={handleInputChange}\n        />\n        <select\n          name=\"receiptType\"\n          value={formInvoice.receiptType}\n          onChange={handleInputChange}\n        >\n          <option value=\"\">Select Receipt Type</option>\n          {receiptTypes.map((option, index) => (\n            <option key={index} value={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n        <textarea\n          name=\"narrative\"\n          placeholder=\"Narrative\"\n          value={formInvoice.narrative}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"number\"\n          name=\"amount\"\n          placeholder=\"Amount\"\n          value={formInvoice.amount}\n          onChange={handleInputChange}\n        />\n\n        {/* Dropdown for selecting currency */}\n        <select\n          name=\"currency\"\n          value={formInvoice.currency}\n          onChange={handleInputChange}\n        >\n          <option value=\"\">Select Currency</option>\n          {availableCurrencies.map((currency, index) => (\n            <option key={index} value={currency}>\n              {currency}\n            </option>\n          ))}\n        </select>\n\n        {/* Converting Currency Section */}\n        <select\n          name=\"targetCurrency\"\n          value={formInvoice.targetCurrency}\n          onChange={handleInputChange}\n        >\n          <option value=\"\">Select Target Currency</option>\n          {availableCurrencies.map((currency, index) => (\n            <option key={index} value={currency}>\n              {currency}\n            </option>\n          ))}\n        </select>\n        <input\n          type=\"number\"\n          name=\"conversionRate\"\n          placeholder=\"Conversion Rate\"\n          value={formInvoice.conversionRate}\n          onChange={(e) => {\n            handleInputChange(e);\n            updateConvertedAmount({ ...formInvoice, conversionRate: e.target.value });\n          }}\n        />\n        <input\n          type=\"text\"\n          name=\"convertedAmount\"\n          placeholder=\"Converted Amount\"\n          value={formInvoice.convertedAmount}\n          readOnly\n        />\n\n        {/* Show Existing Images */}\n        {Array.isArray(formInvoice.existingImages) && formInvoice.existingImages.length > 0 && (\n          <div className=\"existing-images\">\n            <h4>Existing Images</h4>\n            <div className=\"existing-images-list\">\n              {formInvoice.existingImages.map((image, index) => (\n                <div key={index} className=\"existing-image-item\">\n                  <img\n                    src={`http://localhost:5001/${image.imageUrl}`}\n                    alt={`Invoice ${formInvoice.invoiceNumber} Image ${index + 1}`}\n                    className=\"invoice-image-thumbnail\"\n                    onClick={() => handleImageClick(image.imageUrl)}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Upload New Images */}\n        <input\n          type=\"file\"\n          name=\"images\"\n          multiple\n          onChange={handleImageChange}\n          accept=\"image/*\"\n        />\n\n        <div className=\"popup-buttons\">\n          <button onClick={handleSubmit} className=\"fancy-button\">\n            {invoice ? 'Update Invoice' : 'Add Invoice'}\n          </button>\n          <button onClick={onClose} className=\"fancy-button cancel-button\">\n            Cancel\n          </button>\n        </div>\n      </div>\n\n      {/* Full Screen Image View */}\n      {fullScreenImage && (\n        <div className=\"full-screen-overlay\" onClick={handleCloseFullScreen}>\n          <div className=\"full-screen-image-container\">\n            <img\n              src={`http://localhost:5001/${fullScreenImage}`}\n              alt=\"Full Screen\"\n              className=\"full-screen-image\"\n            />\n            <button\n              type=\"button\"\n              className=\"close-full-screen-button fancy-button\"\n              onClick={handleCloseFullScreen}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InvoiceFormPopup;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}